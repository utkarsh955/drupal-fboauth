<?php

/**
 * Implements hook_menu().
 */
function fboauth_menu() {
  $items['fboauth/%fboauth_action'] = array(
    'title' => 'Facebook connect',
    'page callback' => 'fboauth_action_page',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    'file' => 'includes/fboauth.fboauth.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/fboauth'] = array(
    'title' => t('Facebook OAuth settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fboauth_settings_form'),
    'access arguments' => array('administer users'),
    'file' => 'includes/fboauth.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['user/%user/fboauth'] = array(
    'title' => t('Facebook settings'),
    'page callback' => 'fboauth_user_settings',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'file' => 'includes/fboath.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function fboauth_theme() {
  return array(
    'fboauth_action' => array(
      'pattern' => 'fboauth_action__[a-z0-9_]+',
      'arguments' => array('action' => NULL, 'properties' => NULL),
    ),
    'fboauth_action__connect' => array(
      'arguments' => array('action' => NULL, 'properties' => NULL),
    ),
    'fboauth_user_form_connect' => array(
      'arguments' => array('uid' => NULL, 'fbid' => NULL),
    ),
  );
}

/**
 * Implements hook_block().
 */
function fboauth_block($op = 'list', $delta = '', $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks['login'] = array(
        'info' => t('Facebook login'),
      );
      return $blocks;
    case 'view':
      $block = array();
      $app_id = variable_get('fboauth_id', '');
      if ($app_id && !fboauth_fbid_load()) {
        $block['content'] = fboauth_action_display('connect', $app_id);
      }
      return $block;
  }
}

/**
 * Implements hook_user().
 */
function fboauth_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'insert':
      fboauth_user_insert($edit, $account, $category);
      break;
    case 'update':
      fboauth_user_update($edit, $account, $category);
      break;
    case 'delete':
      fboauth_user_delete($account);
      break;
  }
}

/**
 * Implements hook_user_insert().
 */
function fboauth_user_insert(&$edit, &$account, $category) {
  if (isset($edit['fboauth_fbid'])) {
    fboauth_save($account->uid, $edit['fboauth_fbid']);
  }
}

/**
 * Implements hook_user_update().
 */
function fboauth_user_update(&$edit, &$account, $category) {
  if (isset($edit['fboauth_fbid'])) {
    fboauth_save($account->uid, $edit['fboauth_fbid']);
  }
}

/**
 * Implements hook_user_delete().
 */
function fboauth_user_delete($account) {
  // Passing in a NULL $fbid deletes any existing associations.
  fboauth_save($account->uid, NULL);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function fboauth_form_user_profile_form_alter(&$form, &$form_state) {
  $uid = $form['#uid'];
  $fbid = fboauth_fbid_load($uid);

  $fboauth_form = array(
    '#type' => 'item',
    '#title' => t('Facebook connect'),
    '#children' => theme('fboauth_user_form_connect', $uid, $fbid),
  );

  // The account settings move around in this form.
  $account_form = isset($form['account']) ? $form['account'] : $form;

  // Inject the Facebook options after the e-mail settings. No weights are on
  // these elements by default, so we have to put it in order.
  $temp_form = array();
  foreach (element_children($account_form) as $child) {
    $temp_form[$child] = $account_form[$child];
    if ($child == 'mail') {
      $fboauth_form['weight'] = $temp_form[$child]['#weight'];
      $temp_form['fboauth'] = $fboauth_form;
    }
    unset($account_form[$child]);
  }

  $account_form += $temp_form;
  if (isset($form['account'])) {
    $form['account'] = $account_form;
  }
  else {
    $form = $account_form;
  }
}

/**
 * Implements hook_fboauth_actions().
 */
function fboauth_fboauth_actions() {
  $actions = array();

  $connect_permissions = array();
  $connect_permissions += variable_get('fboauth_user_email', TRUE) ? array('email' => 'email') : array();
  $connect_permissions += fboauth_user_permissions(variable_get('fboauth_user_properties', array()));
  $connect_permissions += fboauth_user_permissions(variable_get('fboauth_user_connections', array()));

  if (module_exists('profile')) {
    $connect_permissions += fboauth_user_permissions(variable_get('fboauth_user_profile', array()));
  }

  $actions['connect'] = array(
    'title' => t('Connect'),
    'file' => 'includes/fboauth.login.inc',
    'callback' => 'fboauth_action_connect',
    'permissions' => $connect_permissions,
    'theme callback' => 'fboauth_connect_link',
  );
  $actions['deauth'] = array(
    'title' => t('Deauthorize'),
    'file' => 'includes/fboauth.login.inc',
    'callback' => 'fboauth_action_deauth',
    'theme callback' => 'fboauth_deauth_link',
  );
  return $actions;
}

/**
 * Load a Facebook OAuth action.
 *
 * This function searches available actions provided by hook_fboauth_actions().
 */
function fboauth_action_load($action_name) {
  static $actions;

  // Build the list of all available actions.
  if (!isset($actions)) {
    $actions = array();
    module_load_include('inc', 'fboauth', 'includes/fboauth.fboauth');

    foreach (module_implements('fboauth_actions') as $module) {
      if ($module_actions = module_invoke($module, 'fboauth_actions')) {
        foreach ($module_actions as $module_action_name => $module_action) {
          $module_action['name'] = $module_action_name;
          $module_action['module'] = $module;
          $module_action['file path'] = isset($module_action['file path']) ? $module_action['file path'] : drupal_get_path('module', $module);
          $module_action['properties'] = isset($module_action['properties']) ? $module_action['properties'] : array();
          $module_action['connections'] = isset($module_action['connections']) ? $module_action['connections'] : array();
          $module_action['permissions'] = isset($module_action['permissions']) ? $module_action['permissions'] : array();
          $actions[$module_action_name] = $module_action;
        }
      }
    }

    drupal_alter('fboauth_actions', $actions);
  }

  $action = isset($actions[$action_name]) ? $actions[$action_name] : FALSE;

  // Include any necessary includes for the file.
  if ($action) {
    if (isset($action['file'])) {
      $file = './' . $action['file path'] . '/' . $action['file'];
      if (file_exists($file)) {
        include_once $file;
      }
    }
  }

  return $action;
}

/**
 * Load a Facebook ID given a Drupal User ID.
 */
function fboauth_fbid_load($uid = NULL) {
  $uid = isset($uid) ? $uid : $GLOBALS['user']->uid;
  $result = db_query("SELECT fbid FROM {fboauth_users} WHERE uid = %d", $uid);
  $fbid = db_result($result);
  return $fbid ? (int) $fbid : FALSE;
}

/**
 * Load a Drupal User ID given a Facebook ID.
 */
function fboauth_uid_load($fbid) {
  $result = db_query("SELECT uid FROM {fboauth_users} WHERE fbid = %d", $fbid);
  $uid = db_result($result);
  return $uid ? (int) $uid : FALSE;
}

/**
 * Save a Drupal User ID to Facebook ID pairing.
 *
 * Passing in NULL for $fbid can also be used to delete a UID to FBID pairing.
 */
function fboauth_save($uid, $fbid) {
  db_query('DELETE FROM {fboauth_users} WHERE uid = %d', $uid);
  if (!empty($fbid)) {
    db_query('INSERT INTO {fboauth_users} (uid, fbid) VALUES (%d, %d)', $uid, $fbid);
  }
}

/**
 * Output a Facebook link.
 *
 * This is simply a convience function for outputing a link. If wanting to
 * customize the display of the link, override the theme_fboauth_connect_link()
 * function in your theme.
 *
 * @see theme_fboauth_action()
 */
function fboauth_action_display($action_name, $app_id = NULL) {
  // Use the default App ID if not specified.
  $app_id = isset($app_id) ? $app_id : variable_get('fboauth_id', '');

  $action = fboauth_action_load($action_name);
  $link = fboauth_action_link_properties($action_name, $app_id);
  $theme = isset($action['theme']) ? $action['theme'] : array('fboauth_action__' . $action_name, 'fboauth_action');
  return theme($theme, $action, $link);
}

/**
 * Return a set of properties suitable for use to a url() call.
 */
function fboauth_action_link_properties($action_name, $app_id = NULL) {
  // Use the default App ID if not specified.
  $app_id = isset($app_id) ? $app_id : variable_get('fboauth_id', '');
  $action = fboauth_action_load($action_name);

  // Determine the required permissions for this action.
  if (!empty($action['permissions'])) {
    $permissions = $action['permissions'];
  }
  elseif (!empty($action['properties']) || !empty($action['connections'])) {
    $properties = $action['properties'];
    $connections = $action['connections'];
    $permissions = fboauth_user_permissions(array_merge($properties, $connections));
  }
  else {
    $permissions = array();
  }

  $return = array(
    'query' => array(
      'client_id' => $app_id,
      'redirect_uri' => url('fboauth/connect', array('absolute' => TRUE, 'query' => !empty($_GET['destination']) ? array('destination' => $_GET['destination']) : array())),
    ),
    'href' => 'https://www.facebook.com/dialog/oauth',
  );

  if ($permissions) {
    $return['query']['scope'] = implode(',', $permissions);
  }

  return $return;
}

/**
 * Return a link to initiate a Facebook Connect login or association.
 *
 * @param $link
 *   An array of properties to be used to generate a login link. Note that all
 *   provided properties are required for the Facebook login to succeed and
 *   must not be changed. If $link is FALSE, Facebook OAuth is not yet
 *   configured.
 * @see fboauth_link_properties()
 */
function theme_fboauth_action($action, $link) {
  $url = url($link['href'], array('query' => $link['query']));
  $content = '<input type="button" onclick="javascript: window.location = ' . $url . '; return false;" value="' . check_plain($action['title']) . '" />';
  return $content;
}

/**
 * Return a link to initiate a Facebook Connect login or association.
 *
 * @param $link
 *   An array of properties to be used to generate a login link. Note that all
 *   provided properties are required for the Facebook login to succeed and
 *   must not be changed. If $link is FALSE, Facebook OAuth is not yet
 *   configured.
 * @see fboauth_link_properties()
 */
function theme_fboauth_action__connect($action, $link) {
  $url = url($link['href'], array('query' => $link['query']));
  return '<a href="' . $url . '"><img src="http://static.ak.fbcdn.net/images/fbconnect/login-buttons/connect_light_medium_short.gif" alt="fblogin" /></a>';
}

/**
 * Display the Facebook Connect options on a user's profile form.
 */
function theme_fboauth_user_form_connect($uid, $fbid) {
  if ($fbid) {
    $output = t('Your account is connected with Facebook. (<a href="!url">More info</a>)', array('!url' => url('user/' . $uid . '/fboauth')));
  }
  else {
    $output = fboauth_action_display('connect');
    $output .= '<div class="description">' . t('Connect your account with Facebook to simplify login.') . '</div>';
  }
  return $output;
}
